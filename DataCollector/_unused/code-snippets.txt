//- (NSString *)xmlRepresentation;
//- (void)setWithPropertyDictionary:(NSDictionary *)propertyDictionary;

//???: (sb) Unused code
//- (NSString *)xmlRepresentation
//{
//	NSMutableString *xml = [NSMutableString stringWithCapacity:32];
//	[xml appendString:@"<UserSession>"];
//
//	if (_objectId != nil)
//    {
//		[xml appendFormat:@"<id>%lu</id>", [_objectId unsignedLongValue]];
//	}
//
//	if (_created != nil)
//    {
//		NSDateFormatter *outputFormatter = [[NSDateFormatter alloc] init];
//		[outputFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
//		NSString *createdString = [outputFormatter stringFromDate:_created];
//
//		[xml appendFormat:@"<created>%@</created>", createdString];
//	}
//
//    if (_modified != nil)
//    {
//		NSDateFormatter *outputFormatter = [[NSDateFormatter alloc] init];
//		[outputFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
//		NSString *modifiedString = [outputFormatter stringFromDate:_modified];
//
//		[xml appendFormat:@"<modified>%@</modified>", modifiedString];
//	}
//
//    if (_udid != nil)
//    {
//		[xml appendFormat:@"<udid>%@</udid>", _udid];
//	}
//
//	[xml appendString:@"</UserSession>"];
//	return xml;
//}
//
//- (void)setWithPropertyDictionary:(NSDictionary *)propertyDictionary
//{
//    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
//    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
//    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
//
//    if (propertyDictionary[@"id"] != nil)
//    {
//        NSNumber *tempObjectId = @([[numberFormatter numberFromString:propertyDictionary[@"id"]] unsignedLongValue]);
//        self.objectId = tempObjectId;
//    }
//
//    if (propertyDictionary[@"created"] != nil)
//    {
//        NSDate *createdDate = [dateFormatter dateFromString:propertyDictionary[@"created"]];
//        self.created = createdDate;
//    }
//
//    if (propertyDictionary[@"modified"] != nil)
//    {
//        NSDate *modifiedDate = [dateFormatter dateFromString:propertyDictionary[@"modified"]];
//        self.modified = modifiedDate;
//    }
//
//    if (propertyDictionary[@"udid"] != nil)
//    {
//        self.udid = propertyDictionary[@"udid"];
//    }
//}


---


//???: (sb) Unused code
//#pragma mark -
//#pragma mark - Server connection
//
//- (void)addUserSession
//{
//    void (^completionHandler)(NSURLResponse*, NSData*, NSError*) = ^(NSURLResponse *response, NSData *data, NSError *error) {
//        if ([data length] > 0 && error == nil) {
//            dispatch_async(dispatch_get_main_queue(), ^{
//                CXMLDocument *doc = [[CXMLDocument alloc] initWithData:data options:0 error:nil];
//                NSArray *nodes = nil;
//                
//                // Error case
//                nodes = [doc nodesForXPath:@"/response/objects/Error/id" error:nil];
//                if ([nodes count] > 0) {
//                    
//                    // Feedback
//                    int errorId = [[[nodes[0] childAtIndex:0] stringValue] intValue];
//                    UIAlertView *alert;
//                    switch (errorId) {
//                        case 4:
//                            alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"User session", @"User session")
//                                                               message:NSLocalizedString(@"User session has not been saved.", @"User session has not been saved.")
//                                                              delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", @"Ok")
//                                                     otherButtonTitles:nil];
//                            NSLog(@"# User session has not been saved (add user session).");
//                            break;
//                        default:
//                            alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error", @"Error")
//                                                               message:NSLocalizedString(@"Unknown error" , @"Unknown error")
//                                                              delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", @"Ok")
//                                                     otherButtonTitles:nil];
//                            NSLog(@"# Unknown error (add user session)");
//                            break;
//                    }
//                    [alert show];
//                    return;
//                }
//                
//                // Completed successfully
//                nodes = [doc nodesForXPath:@"/response/objects/UserSession" error:nil];
//                
//                if ([nodes count] > 0) {
//                    NSMutableDictionary *propertyDictionary = [[NSMutableDictionary alloc] init];
//                    int counter;
//                    for(counter = 0; counter < [nodes[0] childCount]; counter++) {
//                        
//                        //  common procedure: dictionary with keys/values from XML node
//                        propertyDictionary[[[nodes[0] childAtIndex:counter] name]] = [[nodes[0] childAtIndex:counter] stringValue];
//                    }
//                    [userSession setWithPropertyDictionary:propertyDictionary];
//                }
//            });
//        } else {
//            if ([data length] == 0 && error == nil) {
//                NSLog(@"# Nothing was downloaded (add user session)");
//            } else {
//                if (error != nil) {
//                    NSLog(@"# Error happened (add user session) = %@", error);
//                }
//            }
//        }
//    };
//    
//    // Server request (add user session)
//    Connection *connection = [[Connection alloc] initWithHost:@"http://galow.flow-maschinen.de/"];
//    [connection aAddWithControllerPath:@"user_sessions" bodyAsString:[userSession xmlRepresentation] completionHandler:completionHandler];
//}
//
//- (void)attachZipFile
//{
//    void (^completionHandler)(NSURLResponse*, NSData*, NSError*) = ^(NSURLResponse *response, NSData *data, NSError *error) {
//        if ([data length] > 0 && error == nil) {
//            dispatch_async(dispatch_get_main_queue(), ^{
//                CXMLDocument *doc = [[CXMLDocument alloc] initWithData:data options:0 error:nil];
//                NSArray *nodes = nil;
//                nodes = [doc nodesForXPath:@"/response/objects/Error/id" error:nil];
//                if ([nodes count] > 0) {
//                    
//                    // Feedback
//                    int errorId = [[[nodes[0] childAtIndex:0] stringValue] intValue];
//                    UIAlertView *alert;
//                    switch (errorId) {
//                        case 5:
//                            alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"User session", @"User session")
//                                                               message:NSLocalizedString(@"User session has not been saved.", @"User session has not been saved.")
//                                                              delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", @"Ok")
//                                                     otherButtonTitles:nil];
//                            NSLog(@"# User session has not been saved (attach zip file).");
//                            break;
//                        default:
//                            alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error", @"Error")
//                                                               message:NSLocalizedString(@"Unknown error" , @"Unknown error")
//                                                              delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", @"Ok")
//                                                     otherButtonTitles:nil];
//                            NSLog(@"# Unknown error (attach zip file)");
//                            break;
//                    }
//                    [alert show];
//                    return;
//                }
//                
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"User session", @"User session")
//                                                                message:NSLocalizedString(@"User session has been saved." , @"User session has been saved.")
//                                                               delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", @"Ok")
//                                                      otherButtonTitles:nil];
//                [alert show];
//                NSLog(@"# User session has been saved.");
//            });
//        }
//    };
//    
//    // Attach zip file
//    NSData *data = [userSession seriliazeAndZip];
//    
//    if(data != nil) {
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Great job!", @"Great job!")
//                                                        message:NSLocalizedString(@"Data has been locally saved." , @"Data has been locally saved.")
//                                                       delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", @"Ok")
//                                              otherButtonTitles:nil];
//        NSLog(@"# Data has been locally saved");
//        [alert show];
//        
//        // Server request (attach zip file)
//        Connection *connection = [[Connection alloc] initWithHost:@"http://galow.flow-maschinen.de/"];
//        [connection aAttachFileWithControllerPath:[NSString stringWithFormat:@"user_sessions/%lu", [userSession.objectId unsignedLongValue]] fileAsData:data contentDispositionName:@"data[UserSession][zip]" contentType:@"application/zip" completionHandler:completionHandler];
//    } else {
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Damn!", @"Damn!")
//                                                        message:NSLocalizedString(@"Data has not been saved." , @"Data has not been saved.")
//                                                       delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", @"Ok")
//                                              otherButtonTitles:nil];
//        [alert show];
//    }
//}

